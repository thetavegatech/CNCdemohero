// import React, { useEffect, useState } from 'react';
// import ReactApexChart from 'react-apexcharts';
// import axios from 'axios';

// const ToolsLifeChart = ({ machineId}) => {
//   console.log(machineId)
//   const [chartData, setChartData] = useState({
//     series: [
//       {
//         name: 'Actual Life',
//         data: [],
//       },
//       {
//         name: 'Set Life',
//         data: [],
//       },
//     ],
//     options: {
//       chart: {
//         type: 'bar',
//         height: 350,
//       },
//       plotOptions: {
//         bar: {
//           horizontal: false,
//           columnWidth: '55%',
//           endingShape: 'rounded',
//         },
//       },
//       dataLabels: {
//         enabled: false,
//       },
//       stroke: {
//         show: true,
//         width: 2,
//         colors: ['transparent'],
//       },
//       xaxis: {
//         categories: [],
//       },
//       yaxis: {
//         title: {
//           text: 'Life',
//         },
//       },
//       fill: {
//         opacity: 1,
//       },
//       tooltip: {
//         y: {
//           formatter: (val) => ${val},
//         },
//       },
//       title: {
//         text: 'Tool Life vs Set Life',
//         align: 'center',
//       },
//     },
//   });

//   const fetchData = async () => {
//     try {
//       const url = http://localhost:5001/api/tools/machine/${machineId};
//       const response = await axios.get(url);
//       const data = response.data;

//       // Transform data for the chart
//       const categories = data.map((tool) => tool.toolName);
//       const actualLife = data.map((tool) => Number(tool.actualLife));
//       const setLife = data.map((tool) => Number(tool.setLife));

//       setChartData((prevData) => ({
//         ...prevData,
//         series: [
//           {
//             name: 'Actual Life',
//             data: actualLife,
//           },
//           {
//             name: 'Set Life',
//             data: setLife,
//           },
//         ],
//         options: {
//           ...prevData.options,
//           xaxis: {
//             categories: categories,
//           },
//         },
//       }));
//     } catch (error) {
//       console.error('Error fetching data:', error);
//     }
//   };

//   useEffect(() => {
//     fetchData();
//     const interval = setInterval(fetchData, 1000);

//     // Clean up the interval on component unmount
//     return () => clearInterval(interval);
//   }, []); // Fetch data on initial load

//   return (
//     <div className="card mb-4 d-flex flex-column h-100">
//       <div className="card-header">
//         <h3>Tool Life Chart {machineId}</h3>
//       </div>
//       <div className="card-body flex-fill">
//         <div style={{ height: '350px' }}>
//           <ReactApexChart
//             options={chartData.options}
//             series={chartData.series}
//             type="bar"
//             height={350}
//           />
//         </div>
//       </div>
//     </div>
//   );
// };

// export default ToolsLifeChart;


















// import React, { useEffect, useState } from 'react';
// import axios from 'axios';
// import './Parameter.css';

// const Dashboard = () => {
//   const [parameters, setParameters] = useState([]);
//   const [selectedMachine, setSelectedMachine] = useState('MACHINE2'); // Default machine

//   const fetchParameters = async (machineName) => {
//     try {
//       const response = await axios.get(http://localhost:5001/api/machine-data/monitoring/ORG001/${machineName});
//       setParameters(response.data);
//     } catch (error) {
//       console.error("Error fetching parameters:", error);
//     }
//   };

//   useEffect(() => {
//     // Fetch parameters when the selected machine changes
//     fetchParameters(selectedMachine);

//     // Set up interval to fetch parameters every minute
//     const interval = setInterval(() => {
//       fetchParameters(selectedMachine);
//     }, 60000); // 60000 milliseconds = 1 minute

//     // Clean up the interval on component unmount
//     return () => clearInterval(interval);
//   }, [selectedMachine]); // Fetch parameters when selectedMachine changes

//   // Split parameters into two halves
//   const halfIndex = Math.ceil(parameters.length / 2);
//   const firstHalf = parameters.slice(0, halfIndex);
//   const secondHalf = parameters.slice(halfIndex);

//   const handleMachineChange = (machineName) => {
//     setSelectedMachine(machineName); // Update selected machine
//   };

//   return (
//     <div className="container-fluid" style={{ marginLeft: '20px', marginTop: '4rem' }}>
//       <h4 className="text-center1 bg-warning mb">Dashboard Parameters {selectedMachine}</h4>
//       <div className="row">
//         {/* Left Column */}
//         <div className="col-md-6">
//           {firstHalf.map((param) => (
//             <div className="row parameter-row" key={param._id}>
//               <div className="col-12 d-flex align-items-center text-center">
//                 {/* Icon */}
//                 <div className="col-2 d-flex align-items-center justify-content-center text-center">
//                   <i className="bi bi-circle parameter-icon" />
//                 </div>
//                 {/* Label */}
//                 <div className="col-6 d-flex align-items-center justify-content-center text-center">
//                   <span className="parameter-label">{param.ParameterName}</span>
//                 </div>
//                 {/* Value */}
//                 <div className="col-2 d-flex align-items-center justify-content-center text-center">
//                   <span className="parameter-value">{param.ParameterValue}</span>
//                 </div>
//                 {/* Unit */}
//                 <div className="col-2 d-flex align-items-center justify-content-center text-center">
//                   <span className="parameter-unit">
//                     {isNaN(param.ParameterValue) ? "" : (param.ParameterName.includes("Temp") ? "°C" : "%")}
//                   </span>
//                 </div>
//               </div>
//             </div>
//           ))}
//         </div>

//         {/* Right Column */}
//         <div className="col-md-6">
//           {secondHalf.map((param) => (
//             <div className="row parameter-row" key={param._id}>
//               <div className="col-12 d-flex align-items-center text-center">
//                 {/* Icon */}
//                 <div className="col-2 d-flex align-items-center justify-content-center text-center">
//                   <i className="bi bi-circle parameter-icon" />
//                 </div>
//                 {/* Label */}
//                 <div className="col-6 d-flex align-items-center justify-content-center text-center">
//                   <span className="parameter-label">{param.ParameterName}</span>
//                 </div>
//                 {/* Value */}
//                 <div className="col-2 d-flex align-items-center justify-content-center text-center">
//                   <span className="parameter-value">{param.ParameterValue}</span>
//                 </div>
//                 {/* Unit */}
//                 <div className="col-2 d-flex align-items-center justify-content-center text-center">
//                   <span className="parameter-unit">
//                     {isNaN(param.ParameterValue) ? "" : (param.ParameterName.includes("Temp") ? "°C" : "%")}
//                   </span>
//                 </div>
//               </div>
//             </div>
//           ))}
//         </div>
//       </div>

//       {/* Footer Buttons */}
//       <div className="footer-buttons mt-4 text-center">
//         <button className="btn btn-secondary mx-2" onClick={() => handleMachineChange('MACHINE2')}>MACHINE2</button>
//         <button className="btn btn-success mx-2" onClick={() => handleMachineChange('MACHINE3')}>MACHINE3</button>
//         <button className="btn btn-danger mx-2" onClick={() => handleMachineChange('CNCMACHINE1')}>CNCMACHINE1</button>
//       </div>
//     </div>
//   );
// };

// export default Dashboard;






// new 

// import React, { useState } from 'react';
// import 'bootstrap/dist/css/bootstrap.min.css';
// import { Container, Row, Col, Form, Button } from 'react-bootstrap';
// import axios from 'axios';

// const ResponsiveForm = () => {
//   const initialFormData = {
//     machineId: '',
//     downtimeReason: '',
//     technician: '',
//     shift: '',
//     lineName: '',
//     location: '',
//     downtimeStart: '',
//     downtimeEnd: '',
//     remark: '',
//     actionTaken: ''
//   };

//   const [formData, setFormData] = useState(initialFormData);

//   // Handle input change
//   const handleChange = (e) => {
//     setFormData({ ...formData, [e.target.name]: e.target.value });
//   };

//   // Handle form submission
//   const handleSubmit = async (e) => {
//     e.preventDefault();
//     try {
//       const response = await axios.post('http://localhost:5000/downtime', formData);
//       console.log('Downtime entry created:', response.data);
//       alert('Downtime entry created successfully');
//       // Reset form data
//       setFormData(initialFormData);
//     } catch (error) {
//       console.error('Error creating downtime entry:', error);
//       alert('Error creating downtime entry');
//     }
//   };

//   return (
//     <Container fluid className="p-4 mt-5">
//       <div className="container my-5 pt-2 border border-1 mt-0">
//         <Row className="text-center py-2 mb-0">
//           <Col>
//             <h3>Downtime Entry</h3>
//           </Col>
//         </Row>
//         <Form className='mt-4 mb-2' onSubmit={handleSubmit}>
//           <Row className="mt-4">
//             {/* Machine ID */}
//             <Col lg={4} md={6} sm={12} className="mb-3">
//               <Form.Group controlId="machineId">
//                 <Form.Label>Machine ID</Form.Label>
//                 <Form.Control 
//                   type="text" 
//                   name="machineId" 
//                   value={formData.machineId} 
//                   onChange={handleChange} 
//                   placeholder="Enter Machine ID" 
//                 />
//               </Form.Group>
//             </Col>

//             {/* Downtime Reason */}
//             <Col lg={4} md={6} sm={12} className="mb-3">
//               <Form.Group controlId="downtimeReason">
//                 <Form.Label>Downtime Reason</Form.Label>
//                 <Form.Control 
//                   type="text" 
//                   name="downtimeReason" 
//                   value={formData.downtimeReason} 
//                   onChange={handleChange} 
//                   placeholder="Enter Downtime Reason" 
//                 />
//               </Form.Group>
//             </Col>

//             {/* Technician */}
//             <Col lg={4} md={6} sm={12} className="mb-3">
//               <Form.Group controlId="technician">
//                 <Form.Label>Technician</Form.Label>
//                 <Form.Control 
//                   type="text" 
//                   name="technician" 
//                   value={formData.technician} 
//                   onChange={handleChange} 
//                   placeholder="Enter Technician" 
//                 />
//               </Form.Group>
//             </Col>

//             {/* Shift */}
//             <Col lg={4} md={6} sm={12} className="mb-3">
//               <Form.Group controlId="shift">
//                 <Form.Label>Shift</Form.Label>
//                 <Form.Control 
//                   type="text" 
//                   name="shift" 
//                   value={formData.shift} 
//                   onChange={handleChange} 
//                   placeholder="Enter Shift" 
//                 />
//               </Form.Group>
//             </Col>

//             {/* Line Name */}
//             <Col lg={4} md={6} sm={12} className="mb-3">
//               <Form.Group controlId="lineName">
//                 <Form.Label>Line Name</Form.Label>
//                 <Form.Control 
//                   type="text" 
//                   name="lineName" 
//                   value={formData.lineName} 
//                   onChange={handleChange} 
//                   placeholder="Enter Line Name" 
//                 />
//               </Form.Group>
//             </Col>

//             {/* Location */}
//             <Col lg={4} md={6} sm={12} className="mb-3">
//               <Form.Group controlId="location">
//                 <Form.Label>Location</Form.Label>
//                 <Form.Control 
//                   type="text" 
//                   name="location" 
//                   value={formData.location} 
//                   onChange={handleChange} 
//                   placeholder="Enter Location" 
//                 />
//               </Form.Group>
//             </Col>

//             {/* Downtime Start */}
//             <Col lg={4} md={6} sm={12} className="mb-3">
//               <Form.Group controlId="downtimeStart">
//                 <Form.Label>Downtime Start</Form.Label>
//                 <Form.Control 
//                   type="datetime-local" 
//                   name="downtimeStart" 
//                   value={formData.downtimeStart} 
//                   onChange={handleChange} 
//                 />
//               </Form.Group>
//             </Col>

//             {/* Downtime End */}
//             <Col lg={4} md={6} sm={12} className="mb-3">
//               <Form.Group controlId="downtimeEnd">
//                 <Form.Label>Downtime End</Form.Label>
//                 <Form.Control 
//                   type="datetime-local" 
//                   name="downtimeEnd" 
//                   value={formData.downtimeEnd} 
//                   onChange={handleChange} 
//                 />
//               </Form.Group>
//             </Col>

//             {/* Remark */}
//             <Col lg={4} md={6} sm={12} className="mb-3">
//               <Form.Group controlId="remark">
//                 <Form.Label>Remark</Form.Label>
//                 <Form.Control 
//                   as="textarea" 
//                   rows={2} 
//                   name="remark" 
//                   value={formData.remark} 
//                   onChange={handleChange} 
//                   placeholder="Enter Remark" 
//                 />
//               </Form.Group>
//             </Col>

//             {/* Action Taken */}
//             <Col lg={8} md={10} sm={12} className="mb-3">
//               <Form.Group controlId="actionTaken">
//                 <Form.Label>Action Taken</Form.Label>
//                 <Form.Control 
//                   as="textarea" 
//                   rows={3} 
//                   name="actionTaken" 
//                   value={formData.actionTaken} 
//                   onChange={handleChange} 
//                   placeholder="Enter Action Taken" 
//                 />
//               </Form.Group>
//             </Col>

//             {/* Save Button */}
//             <Col lg={4} md={4} sm={10} className="mb-3 d-flex align-items-end" style={{ columnGap: '1rem' }}>
//               <Button type="submit" className="w-100 btn btn-success">Save Downtime</Button>
//               <Button 
//                 type="button" 
//                 className="w-100 btn btn-secondary" 
//                 onClick={() => setFormData(initialFormData)}>
//                 Reset
//               </Button>
//             </Col>
//           </Row>
//         </Form>
//       </div>
//     </Container>
//   );
// };

// export default ResponsiveForm;




// api 
// import React, { useState, useEffect } from 'react';

// const DowntimeList = () => {
//   const [downtimeData, setDowntimeData] = useState([]);

//   // Fetch all downtime data
//   const fetchDowntimeData = async () => {
//     try {
//       const response = await fetch('http://localhost:5000/downtime');
//       const data = await response.json();
//       setDowntimeData(data); // Set the fetched data to state
//     } catch (error) {
//       console.error('Error fetching downtime data:', error);
//     }
//   };

//   // Fetch data when component mounts
//   useEffect(() => {
//     fetchDowntimeData();
//   }, []);

//   return (
//     <div>
//       <h3>Downtime Records</h3>
//       <ul>
//         {downtimeData.map((item, index) => (
//           <li key={index}>
//             Machine ID: {item.machineId}, Reason: {item.downtimeReason}, Technician: {item.technician}
//           </li>
//         ))}
//       </ul>
//     </div>
//   );
// };

// export default DowntimeList;



// table api 
// import React, { useState, useEffect } from 'react';
// import 'bootstrap/dist/css/bootstrap.min.css';
// import { Container, Row, Col, Table } from 'react-bootstrap';

// const DowntimeList = () => {
//   const [downtimeData, setDowntimeData] = useState([]);

//   // Function to fetch all downtime data
//   const fetchDowntimeData = async () => {
//     try {
//       const response = await fetch('http://localhost:5000/downtime');
//       if (response.ok) {
//         const data = await response.json();
//         setDowntimeData(data);
//       } else {
//         console.error('Failed to fetch downtime data');
//       }
//     } catch (error) {
//       console.error('Error fetching downtime data:', error);
//     }
//   };

//   // Fetch data when component mounts
//   useEffect(() => {
//     fetchDowntimeData();
//   }, []);

//   return (
//     <Container fluid className="p-4 mt-5">
//       <div className="container my-5 pt-2 border border-1 mt-0">
//         <Row className="text-center py-2 mb-0">
//           <Col>
//             <h3>Downtime Records</h3>
//           </Col>
//         </Row>
//         <Table striped bordered hover className="mt-4">
//           <thead>
//             <tr>
//               <th>Machine ID</th>
//               <th>Downtime Reason</th>
//               <th>Technician</th>
//               <th>Shift</th>
//               <th>Line Name</th>
//               <th>Location</th>
//               <th>Downtime Start</th>
//               <th>Downtime End</th>
//               <th>Remark</th>
//               <th>Action Taken</th>
//             </tr>
//           </thead>
//           <tbody>
//             {downtimeData.map((downtime, index) => (
//               <tr key={index}>
//                 <td>{downtime.machineId}</td>
//                 <td>{downtime.downtimeReason}</td>
//                 <td>{downtime.technician}</td>
//                 <td>{downtime.shift}</td>
//                 <td>{downtime.lineName}</td>
//                 <td>{downtime.location}</td>
//                 <td>{new Date(downtime.downtimeStart).toLocaleString()}</td>
//                 <td>{new Date(downtime.downtimeEnd).toLocaleString()}</td>
//                 <td>{downtime.remark}</td>
//                 <td>{downtime.actionTaken}</td>
//               </tr>
//             ))}
//           </tbody>
//         </Table>
//       </div>
//     </Container>
//   );
// };

// export default DowntimeList;



// after
import React, { useState } from 'react';
import 'bootstrap/dist/css/bootstrap.min.css';
import { Container, Row, Col, Button, Table } from 'react-bootstrap';

const ResponsiveForm = ({ downtimes = [], onEdit, onDelete }) => {
  const initialFormData = {
    machineId: '',
    downtimeReason: '',
    technician: '',
    shift: '',
    lineName: '',
    location: '',
    downtimeStart: '',
    downtimeEnd: '',
    remark: '',
    actionTaken: ''
  };

  const [formData, setFormData] = useState(initialFormData);

  // Handle form data changes
  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.id]: e.target.value
    });
  };

  // Handle form submission
  const handleSubmit = async (e) => {
    e.preventDefault();

    try {
      const response = await fetch('http://localhost:5000/downtime', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(formData)
      });

      if (response.ok) {
        const data = await response.json();
        alert('Downtime saved successfully!');
        console.log('Response data:', data);

        // Reset form data to initial state after successful submission
        setFormData(initialFormData);
      } else {
        const errorData = await response.json();
        console.error('Error saving downtime:', errorData);
        alert('Failed to save downtime.');
      }
    } catch (error) {
      console.error('Error:', error);
      alert('An error occurred while saving downtime.');
    }
  };

  // Handle form reset/cancel
  const handleReset = () => {
    setFormData(initialFormData);
  };

  return (
    <Container fluid className="p-4 mt-5">
      <div className="container my-5 pt-2 border border-1 mt-0">
        <Row className="text-center py-2 mb-0">
          <Col>
            <h3>Downtime Entry</h3>
          </Col>
        </Row>
        <form className='mt-4 mb-2' onSubmit={handleSubmit}>
          <div className="row mt-4">
            {/* Machine ID */}
            <div className="col-lg-4 col-md-6 col-sm-12 mb-3">
              <label htmlFor="machineId" className="form-label">Machine ID</label>
              <select id="machineId" className="form-select" value={formData.machineId} onChange={handleChange}>
                <option value="">Select Machine ID</option>
                <option value="Machine 001">Machine 001</option>
                <option value="Machine 002">Machine 002</option>
                <option value="Machine 003">Machine 003</option>
              </select>
            </div>

            {/* Downtime Reason */}
            <div className="col-lg-4 col-md-6 col-sm-12 mb-3">
              <label htmlFor="downtimeReason" className="form-label">Downtime Reason</label>
              <select id="downtimeReason" className="form-select" value={formData.downtimeReason} onChange={handleChange}>
                <option value="">Select Downtime Reason</option>
                <option value="Breakdown">Breakdown</option>
                <option value="Maintenance">Maintenance</option>
                <option value="Setup Issue">Setup Issue</option>
              </select>
            </div>

            {/* Assigned Technician */}
            <div className="col-lg-4 col-md-6 col-sm-12 mb-3">
              <label htmlFor="technician" className="form-label">Assigned Technician</label>
              <select id="technician" className="form-select" value={formData.technician} onChange={handleChange}>
                <option value="">Select Technician</option>
                <option value="Technician 1">Technician 1</option>
                <option value="Technician 2">Technician 2</option>
                <option value="Technician 3">Technician 3</option>
              </select>
            </div>

            {/* Shift */}
            <div className="col-lg-4 col-md-6 col-sm-12 mb-3">
              <label htmlFor="shift" className="form-label">Shift</label>
              <select id="shift" className="form-select" value={formData.shift} onChange={handleChange}>
                <option value="">Select Shift</option>
                <option value="Shift 1">Shift 1</option>
                <option value="Shift 2">Shift 2</option>
                <option value="Shift 3">Shift 3</option>
              </select>
            </div>

            {/* Line Name */}
            <div className="col-lg-4 col-md-6 col-sm-12 mb-3">
              <label htmlFor="lineName" className="form-label">Line Name</label>
              <select id="lineName" className="form-select" value={formData.lineName} onChange={handleChange}>
                <option value="">Select Line</option>
                <option value="Line 1">Line 1</option>
                <option value="Line 2">Line 2</option>
                <option value="Line 3">Line 3</option>
              </select>
            </div>

            {/* Location */}
            <div className="col-lg-4 col-md-6 col-sm-12 mb-3">
              <label htmlFor="location" className="form-label">Location</label>
              <input
                type="text"
                id="location"
                className="form-control"
                placeholder="Enter Location"
                value={formData.location}
                onChange={handleChange}
              />
            </div>

            {/* Downtime Start */}
            <div className="col-lg-4 col-md-6 col-sm-12 mb-3">
              <label htmlFor="downtimeStart" className="form-label">Downtime Start</label>
              <input
                type="datetime-local"
                id="downtimeStart"
                className="form-control"
                value={formData.downtimeStart}
                onChange={handleChange}
              />
            </div>

            {/* Downtime End */}
            <div className="col-lg-4 col-md-6 col-sm-12 mb-3">
              <label htmlFor="downtimeEnd" className="form-label">Downtime End</label>
              <input
                type="datetime-local"
                id="downtimeEnd"
                className="form-control"
                value={formData.downtimeEnd}
                onChange={handleChange}
              />
            </div>

            {/* Remark */}
            <div className="col-lg-4 col-md-6 col-sm-12 mb-3">
              <label htmlFor="remark" className="form-label">Remark</label>
              <textarea
                id="remark"
                className="form-control"
                rows="2"
                placeholder="Enter Remark"
                value={formData.remark}
                onChange={handleChange}
              />
            </div>

            {/* Action Taken */}
            <div className="col-lg-8 col-md-10 col-sm-12 mb-1" style={{ width: '25rem'}}>
              <label htmlFor="actionTaken" className="form-label">Action Taken</label>
              <textarea
                id="actionTaken"
                className="form-control"
                rows="3"
                placeholder="Enter Action Taken"
                value={formData.actionTaken}
                onChange={handleChange}
              />
            </div>

            {/* Save Downtime Button */}
            <div className="col-lg-4 col-md-4 col-sm-10 mb-3 d-flex align-items-end d-flex" style={{ columnGap: '1rem' }}>
              <button type="submit" className="btn btn-success w-100">Save Downtime</button>
              <button
                type="button"
                className="btn btn-secondary w-100"
                onClick={handleReset}
              >
                Cancel
              </button>
            </div>
          </div>
        </form>
      </div>

      {/* table code  */}
       {/* Downtime Table */}
       <Table striped bordered hover>
        <thead>
          <tr>
            <th>Machine ID</th>
            <th>Reason</th>
            <th>Technician</th>
            <th>Shift</th>
            <th>Line Name</th>
            <th>Location</th>
            <th>Start</th>
            <th>End</th>
            <th>Remark</th>
            <th>Action Taken</th>
            <th>Edit</th>
            <th>Delete</th>
          </tr>
        </thead>
        <tbody>
          {downtimes && downtimes.length > 0 ? (
            downtimes.map((downtime) => (
              <tr key={downtime._id}>
                <td>{downtime.machineId}</td>
                <td>{downtime.downtimeReason}</td>
                <td>{downtime.technician}</td>
                <td>{downtime.shift}</td>
                <td>{downtime.lineName}</td>
                <td>{downtime.location}</td>
                <td>{new Date(downtime.downtimeStart).toLocaleString()}</td>
                <td>{new Date(downtime.downtimeEnd).toLocaleString()}</td>
                <td>{downtime.remark}</td>
                <td>{downtime.actionTaken}</td>
                <td>
                  <Button variant="warning" onClick={() => onEdit(downtime)}>
                    Edit
                  </Button>
                </td>
                <td>
                  <Button variant="danger" onClick={() => onDelete(downtime._id)}>
                    Delete
                  </Button>
                </td>
              </tr>
            ))
          ) : (
            <tr>
              <td colSpan="12" className="text-center">
                No Downtimes Available
              </td>
            </tr>
          )}
        </tbody>
      </Table>
    </Container>
  );
};

export default ResponsiveForm;
